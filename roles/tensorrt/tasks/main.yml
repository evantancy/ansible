---
- name: Check if TensorRT deb file exists
  stat:
    path: "{{ install_dir }}/{{ tensorrt_deb_file }}"
  register: tensorrt_deb

- name: Download TensorRT deb file
  shell: "wget {{ aid_aws_url }}/{{ tensorrt_deb_file }} -P {{ install_dir }} --quiet"
  when: tensorrt_deb.stat.exists == false

- name: Install TensorRT via deb
  become: true
  apt:
    deb: "{{ install_dir }}/{{ tensorrt_deb_file }}"

# For some reason this doesn't work
# - name: Add TensorRT apt key && sudo apt update && sudo apt upgrade -y
#   become: true
#   apt_key:
#     file: "{{ tensorrt_apt_key }}"
#     state: present
#   notify:
#     - apt_update

- name: Add TensorRT apt key && sudo apt update && sudo apt upgrade -y
  shell: "sudo apt-key add {{ tensorrt_apt_key }}"
  notify:
    - apt_update

- meta: flush_handlers

- name: Install TensorRT
  become: true
  apt:
    name: tensorrt
    state: present

- name: Installing TensorRT packages for running and building Python apps
  become: true
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - python-libnvinfer
    - python-libnvinfer-dev
    - python3-libnvinfer
    - python3-libnvinfer-dev
    - uff-converter-tf # Tensorflow related
    - onnx-graphsurgeon

- name: Installing TensorRT packages for running and building C++ apps
  become: true
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - libnvinfer7
    - libnvinfer-dev
    - libnvparsers7
    - libnvparsers-dev
    - libnvinfer-plugin7
    - libnvinfer-plugin-dev
    - libnvonnxparsers7
    - libnvonnxparsers-dev

- name: "Check if {{ pycuda_file }} exists"
  stat:
    path: "{{ install_dir }}/{{ pycuda_file }}"
  register: pycuda_tar

- name: "Downloading {{ pycuda_file }}"
  shell: "wget {{ pycuda_url }}/{{ pycuda_file }} -P {{ install_dir }} --quiet"
  when: pycuda_tar.stat.exists == false


- name: Install numpy, pytest
  pip:
    executable: pip3
    name: "{{ item }}"
  loop:
    - numpy
    - pytest

- name: "Unzipping {{ pycuda_file }} to /opt/"
  become: true
  unarchive:
    src: "{{ install_dir }}/{{ pycuda_file }}"
    dest: /opt/

- name: PyCUDA - run ./configure.py && make -j && sudo make install
  shell:
    cmd: "./configure.py && make -j{{ ansible_processor_vcpus }} && sudo make install --debug=basic"
    chdir: "/opt/pycuda-{{ pycuda_ver }}"
