---
home_dir: "{{ ansible_env.HOME }}"
install_dir: "{{ home_dir }}/install_dir"
os_distro: "{{ ansible_distribution | lower }}" # ubuntu
os_distro_ver: "{{ ansible_distribution_version | replace('.','') }}" # 1804
os_release: "{{ ansible_distribution_release }}" # bionic
os_kernel: "{{ ansible_kernel }}" # 5.4.0-XX-generic
arch: "{{ ansible_architecture }}"

# some BASE URLs being used
aid_aws_url: "https://ai-debs.s3.amazonaws.com"
nvidia_url: "https://developer.download.nvidia.com/compute/cuda"

# APT Repositories
cmake_repo: "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ {{ os_release }} main"
cmake_rc_repo: "deb https://apt.kitware.com/ubuntu/ {{ os_release }}-rc main"

docker_repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ os_release }} stable"
ppa_nvidia: "ppa:graphics-drivers/ppa"
ppa_git: "ppa:git-core/ppa"
ppa_lazygit: "ppa:lazygit-team/release"
ppa_kvaser: "ppa:astuff/kvaser-linux"

# CMake variables
kitware_gpg_key: "https://apt.kitware.com/keys/kitware-archive-latest.asc"

# Eigen variables
eigen_url: "https://gitlab.com/libeigen/eigen/-/archive"
eigen_file: "eigen-{{ eigen_ver }}.tar.bz2"

# g2o variables
g2o_git_repo: "https://github.com/RainerKuemmerle/g2o.git"

# ROS variables
ros_distro_dict:
  "trusty": "indigo"
  "xenial": "kinetic"
  "bionic": "melodic"
  "focal": "noetic"
rosdep_init_file_path: "/etc/ros/rosdep/sources.list.d/20-default.list"

# CUDA variables
cuda_tk_dict:
  "11.0.2":
    apt_ver: "11-0"
    nvidia_driver: "450.51.05"
    cudnn_ver: "8.0.5.39"
  "11.5.0":
    apt_ver: "11-5"
    nvidia_driver: "495.29.05"
  "11.5.1":
    apt_ver: "11-5"
    nvidia_driver: "495.29.05"
cuda_apt_pref_pin: "cuda-{{ os_distro }}{{ os_distro_ver }}.pin"
cuda_deb_file: "cuda-repo-{{ os_distro }}{{ os_distro_ver }}-{{ cuda_tk_dict[cuda_tk_ver][\"apt_ver\"] }}-local_{{ cuda_tk_ver }}-{{ cuda_tk_dict[cuda_tk_ver][\"nvidia_driver\"] }}-1_amd64.deb"
cuda_apt_key: "/var/cuda-repo-{{ os_distro }}{{ os_distro_ver }}-{{ cuda_tk_dict[cuda_tk_ver][\"apt_ver\"] }}-local/7fa2af80.pub"
cuda_apt_pkg: "cuda-{{ cuda_tk_dict[cuda_tk_ver][\"apt_ver\"] }}"
cuda_tk_apt_pkg: "cuda-toolkit-{{ cuda_tk_dict[cuda_tk_ver][\"apt_ver\"] }}"

# cuDNN variables
cuda_symlink_dir: "/usr/local/cuda-{{ cuda_tk_ver[:4] }}/targets/x86_64-linux/lib"
cudnn_runtime_deb_file: "libcudnn8_{{ cuda_tk_dict[cuda_tk_ver][\"cudnn_ver\"] }}-1+cuda{{ cuda_tk_ver[:4] }}_amd64.deb"
cudnn_runtime_deb_url: "{{ aid_aws_url }}/{{ cudnn_runtime_deb_file | replace('+','%2B') }}"
cudnn_devel_deb_file: "libcudnn8-dev_{{ cuda_tk_dict[cuda_tk_ver][\"cudnn_ver\"] }}-1+cuda{{ cuda_tk_ver[:4] }}_amd64.deb"
cudnn_devel_deb_url: "{{ aid_aws_url }}/{{ cudnn_devel_deb_file | replace('+','%2B') }}"

# TensorRT variables
tensorrt_tag: "cuda{{ cuda_tk_ver[:4] }}-trt{{ tensorrt_ver }}-ga-20201007"
tensorrt_deb_file: "nv-tensorrt-repo-{{ os_distro }}{{ os_distro_ver }}-{{ tensorrt_tag }}_1-1_amd64.deb"
tensorrt_apt_key: "/var/nv-tensorrt-repo-{{ tensorrt_tag }}/7fa2af80.pub"

# PyCUDA variables
pycuda_file: "pycuda-{{ pycuda_ver }}.tar.gz"
pycuda_url: "https://files.pythonhosted.org/packages/46/61/47d3235a4c13eec5a5f03594ddb268f4858734e02980afbcd806e6242fa5"

# LinuxCAN variables
linuxcan_file: "linuxcan.tar.gz"
linuxcan_install_dir: "/usr/src"

# PeakCAN variables (aka PCAN)
pcan_ver_list: ["8.11.0","8.10.2", "8.10.1", "8.10.0","8.9.3","8.9.0"]
pcan_api_ver_list: ["4.4.2", "4.4.1", "4.4.0", "4.3.4", "4.3.3", "4.3.2", "4.3.1.3"]
pcan_file: "peak-linux-driver-{{ pcan_ver }}.tar.gz"
pcan_url: "https://www.peak-system.com/fileadmin/media/linux/files/peak-linux-driver-{{ pcan_ver }}.tar.gz"

# Julia variables
julia_file: "julia-{{ julia_ver }}-linux-{{ arch }}.tar.gz"
julia_git_tag: "v{{ julia_ver }}"
julia_init_setup_file: "ONEinitialsetup.jl" # located in ansible/files/

# Flycap variables
flycap_ver: "2.13.3.31"
flycap_file: "flycapture2-{{ flycap_ver }}-amd64.tar.gz"

# Baumer variables
baumer_deb_file: "baumer-gapi-sdk-linux-v2.10.1-gcc-4.8-x86-64.deb"

# PyTorch variables
torch_ver_dict:
  "1.7.1+cu110":
    torchvision_ver: "0.8.2+cu110"
    torchaudio_ver: "0.7.2"
